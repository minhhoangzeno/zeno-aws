{"version":3,"file":"static/js/43.a24ec654.chunk.js","mappings":"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","sources":["apis/categoryProduct.api.ts","apis/container.api.ts","components/edit-table-cell/index.tsx","helper/getFile.helper.ts","pages/category-product/index.tsx"],"sourcesContent":["import { Method, request } from \"../helper/request.helper\";\r\nimport { ICategoryProduct } from \"../interface/CategoryProduct.interface\";\r\n\r\nexport class CategoryProductAPI {\r\n    static readonly COMPONENT_NAME: string = \"CategoryProducts\";\r\n\r\n    static fetchAll = () => {\r\n        return request({\r\n            method: Method.GET,\r\n            url: `/${this.COMPONENT_NAME}`,\r\n            params: {\r\n                filter: {\r\n                    order: \"createdAt DESC\",\r\n                },\r\n            },\r\n        });\r\n    };\r\n\r\n    static create = (data: ICategoryProduct) => {\r\n        return request({\r\n            method: Method.POST,\r\n            url: `/${this.COMPONENT_NAME}`,\r\n            data,\r\n        });\r\n    };\r\n\r\n    static update = (id: number, data: ICategoryProduct) => {\r\n        return request({\r\n            method: Method.PATCH,\r\n            url: `/${this.COMPONENT_NAME}/${id}`,\r\n            data,\r\n        });\r\n    };\r\n\r\n    static delete = (id: number) => {\r\n        return request({\r\n            method: Method.DELETE,\r\n            url: `/${this.COMPONENT_NAME}/${id}`,\r\n        });\r\n    };\r\n}\r\n","import { Method, request } from \"../helper/request.helper\";\r\n\r\nexport class ContainerAPI {\r\n    static readonly COMPONENT_NAME: string = \"Containers\";\r\n\r\n    static upload = (file: File) => {\r\n        const data = new FormData();\r\n        data.append(\"file\", file);\r\n        return request({\r\n            method: Method.POST,\r\n            url: `/${this.COMPONENT_NAME}/image/upload`,\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n            data,\r\n        });\r\n    };\r\n}\r\n","import { Form, Input, InputNumber } from \"antd\";\r\n\r\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\r\n  editing: boolean;\r\n  dataIndex: string;\r\n  title: string;\r\n  inputType: \"number\" | \"text\";\r\n  record: unknown;\r\n  index: number;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const EditableCell: React.FC<EditableCellProps> = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const inputNode = inputType === \"number\" ? <InputNumber /> : <Input />;\r\n\r\n  return (\r\n    <td {...restProps}>\r\n      {editing ? (\r\n        <Form.Item\r\n          name={dataIndex}\r\n          style={{ margin: 0 }}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: `Please Input ${title}!`,\r\n            },\r\n          ]}\r\n        >\r\n          {inputNode}\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n","import { AppConfig } from \"../AppConfig\";\r\nexport const GetFile = (info: any) => {\r\n  const photoURL = `${AppConfig.apiUrl}/Containers/image/download/${info.result.files.file[0].name}`;\r\n  return photoURL;\r\n};\r\n","import {\r\n  CheckOutlined,\r\n  CloseOutlined,\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  EditOutlined,\r\n  PlusOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Form,\r\n  message,\r\n  Popconfirm,\r\n  Row,\r\n  Table,\r\n  Tooltip,\r\n  Typography,\r\n  Upload,\r\n} from \"antd\";\r\nimport { UploadChangeParam } from \"antd/es/upload\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { CategoryProductAPI } from \"../../apis/categoryProduct.api\";\r\nimport { ContainerAPI } from \"../../apis/container.api\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport {\r\n  AddCategoryProduct,\r\n  DeleteCategoryProduct,\r\n  GetCategoryProduct,\r\n  SetCategoryProduct,\r\n  UpdateCategoryProduct,\r\n} from \"../../app/reducers/CategoryProduct/CategoryProduct.reducer\";\r\nimport productPNG from \"../../assets/images/product.png\";\r\nimport { EditableCell } from \"../../components/edit-table-cell\";\r\nimport { GetFile } from \"../../helper/getFile.helper\";\r\nimport { ICategoryProduct } from \"../../interface/CategoryProduct.interface\";\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default function CategoryProduct() {\r\n  const data = useAppSelector(GetCategoryProduct);\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    CategoryProductAPI.fetchAll().then((result: any) => {\r\n      dispatch(SetCategoryProduct(result.data));\r\n    });\r\n  }, [dispatch]);\r\n  const [form] = Form.useForm();\r\n  const isEditing = (record: ICategoryProduct) => record.id === editingKey;\r\n  const [editingKey, setEditingKey] = useState<number | undefined>();\r\n\r\n  const edit = (record: Partial<ICategoryProduct>) => {\r\n    form.setFieldsValue({ ...record });\r\n    setEditingKey(record.id);\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey(undefined);\r\n  };\r\n  const save = (id?: number) => {\r\n    try {\r\n      if (id) {\r\n        const values = form.getFieldsValue() as ICategoryProduct;\r\n        let isError = false;\r\n        const errors = form.getFieldsError();\r\n\r\n        errors.forEach((el) => {\r\n          if (el.errors.length > 0) {\r\n            isError = true;\r\n          }\r\n        });\r\n\r\n        if (!isError) {\r\n          CategoryProductAPI.update(id, values).then((result: any) => {\r\n            setEditingKey(undefined);\r\n            dispatch(UpdateCategoryProduct(result.data));\r\n          });\r\n        } else {\r\n          message.error(\"Validate Failed\");\r\n        }\r\n      } else {\r\n        message.error(\"Validate Failed\");\r\n      }\r\n    } catch (errInfo) {\r\n      console.log(\"Validate Failed:\", errInfo);\r\n    }\r\n  };\r\n  const duplicate = (record: Partial<ICategoryProduct>) => {\r\n    CategoryProductAPI.create({\r\n      title: record.title,\r\n    }).then((result: any) => {\r\n      dispatch(AddCategoryProduct(result.data));\r\n    });\r\n  };\r\n  const remove = (record: Partial<ICategoryProduct>) => {\r\n    if (record.id) {\r\n      CategoryProductAPI.delete(record.id).then(() => {\r\n        dispatch(DeleteCategoryProduct(record));\r\n      });\r\n    }\r\n  };\r\n\r\n  const upload = (record: ICategoryProduct, info: UploadChangeParam) => {\r\n    ContainerAPI.upload(info.file.originFileObj as File).then((result) => {\r\n      const photoURL = GetFile(result.data);\r\n      if (record.id) {\r\n        CategoryProductAPI.update(record.id, { ...record, photoURL }).then(\r\n          (result) => {\r\n            dispatch(UpdateCategoryProduct(result.data));\r\n          }\r\n        );\r\n      }\r\n    });\r\n  };\r\n  const columns = [\r\n    {\r\n      title: \"STT\",\r\n      dataIndex: \"id\",\r\n      render: (_: null, record: ICategoryProduct) => {\r\n        const idx = data.findIndex(\r\n          (el: ICategoryProduct) => el.id === record.id\r\n        );\r\n        return <Typography.Title level={5}>{idx + 1}</Typography.Title>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Tiêu đề\",\r\n      dataIndex: \"title\",\r\n      width: \"30%\",\r\n      editable: true,\r\n    },\r\n    {\r\n      title: \"Đường dẫn ảnh\",\r\n      dataIndex: \"photoURL\",\r\n      width: \"30%\",\r\n      render: (_: null, record: ICategoryProduct) => {\r\n        return (\r\n          <>\r\n            <Upload\r\n              customRequest={(options) => {\r\n                if (options.onSuccess) {\r\n                  options.onSuccess(\"ok\");\r\n                }\r\n              }}\r\n              onChange={(e) => upload(record, e)}\r\n              maxCount={1}\r\n              showUploadList={false}\r\n            >\r\n              <Avatar\r\n                src={record.photoURL ? record.photoURL : productPNG}\r\n                size=\"large\"\r\n              />\r\n            </Upload>\r\n          </>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Thiết lập\",\r\n      render: (_: null, record: ICategoryProduct) => {\r\n        const editTable = isEditing(record);\r\n        return editTable ? (\r\n          <>\r\n            <Tooltip title=\"Lưu\">\r\n              <Typography.Link className=\"mr-4\" onClick={() => save(record.id)}>\r\n                <CheckOutlined style={{ fontSize: \"130%\" }} />\r\n              </Typography.Link>\r\n            </Tooltip>\r\n            <Tooltip title=\"Đóng\">\r\n              <Typography.Link onClick={cancel}>\r\n                <CloseOutlined style={{ fontSize: \"130%\" }} />\r\n              </Typography.Link>\r\n            </Tooltip>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Tooltip title=\"Sửa\">\r\n              <Typography.Link\r\n                className=\"mr-4\"\r\n                disabled={editingKey !== undefined}\r\n                onClick={() => edit(record)}\r\n              >\r\n                <EditOutlined style={{ fontSize: \"130%\" }} />\r\n              </Typography.Link>\r\n            </Tooltip>\r\n            <Popconfirm\r\n              title=\"Bạn có chắc chắn muốn xóa không?\"\r\n              onConfirm={() => {\r\n                remove(record);\r\n              }}\r\n            >\r\n              <Typography.Link className=\"mr-4\">\r\n                <DeleteOutlined style={{ fontSize: \"130%\" }} />\r\n              </Typography.Link>\r\n            </Popconfirm>\r\n\r\n            <Popconfirm\r\n              title=\"Bạn có muốn nhân bản danh mục này không?\"\r\n              onConfirm={() => duplicate(record)}\r\n            >\r\n              <Typography.Link>\r\n                <CopyOutlined style={{ fontSize: \"130%\" }} />\r\n              </Typography.Link>\r\n            </Popconfirm>\r\n          </>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const mergedColumns = columns.map((col) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n    return {\r\n      ...col,\r\n      onCell: (record: ICategoryProduct) => ({\r\n        record: record,\r\n        inputType: col.dataIndex === \"price\" ? \"number\" : \"text\",\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n\r\n  const add = () => {\r\n    CategoryProductAPI.create({\r\n      title: \"CategoryProduct\",\r\n    }).then((result: any) => {\r\n      dispatch(AddCategoryProduct(result.data));\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Title level={3}>Danh mục sản phẩm</Title>\r\n      </Row>\r\n      <Row className=\"mb-4\">\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<PlusOutlined />}\r\n          className=\"mr-4\"\r\n          onClick={add}\r\n        >\r\n          Thêm mới\r\n        </Button>\r\n      </Row>\r\n      <Form form={form} component={false}>\r\n        <Table\r\n          columns={mergedColumns}\r\n          components={{\r\n            body: {\r\n              cell: EditableCell,\r\n            },\r\n          }}\r\n          dataSource={data}\r\n          bordered\r\n          rowKey=\"id\"\r\n          pagination={{ pageSize: 10 }}\r\n        />\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n"],"names":["CategoryProductAPI","_createClass","_classCallCheck","COMPONENT_NAME","fetchAll","request","method","Method","url","concat","params","filter","order","create","data","update","id","delete","ContainerAPI","upload","file","FormData","append","headers","EditableCell","_ref","editing","dataIndex","title","inputType","children","record","index","restProps","_objectWithoutProperties","_excluded","inputNode","_jsx","InputNumber","Input","_objectSpread","Form","name","style","margin","rules","required","message","GetFile","info","AppConfig","result","files","Title","Typography","CategoryProduct","useAppSelector","GetCategoryProduct","dispatch","useAppDispatch","useEffect","then","SetCategoryProduct","_Form$useForm","form","_slicedToArray","isEditing","editingKey","_useState","useState","_useState2","setEditingKey","cancel","undefined","mergedColumns","render","_","idx","findIndex","el","level","width","editable","_Fragment","Upload","customRequest","options","onSuccess","onChange","e","originFileObj","photoURL","UpdateCategoryProduct","maxCount","showUploadList","Avatar","src","productPNG","size","_jsxs","Tooltip","className","onClick","values","getFieldsValue","isError","getFieldsError","forEach","errors","length","errInfo","console","log","save","CheckOutlined","fontSize","CloseOutlined","disabled","setFieldsValue","edit","EditOutlined","Popconfirm","onConfirm","DeleteCategoryProduct","remove","DeleteOutlined","AddCategoryProduct","duplicate","CopyOutlined","map","col","onCell","Row","Button","type","icon","PlusOutlined","component","Table","columns","components","body","cell","dataSource","bordered","rowKey","pagination","pageSize"],"sourceRoot":""}