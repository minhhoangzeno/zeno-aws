{"version":3,"file":"static/js/658.393ba777.chunk.js","mappings":"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","sources":["apis/categoryBlog.api.ts","components/edit-table-cell/index.tsx","pages/category-blog/index.tsx"],"sourcesContent":["import { Method, request } from \"../helper/request.helper\";\nimport { ICategoryBlog } from \"../interface/CategoryBlog.interface\";\n\nexport class CategoryBlogAPI {\n    static readonly COMPONENT_NAME: string = \"CategoryBlogs\";\n\n    static fetchAll = () => {\n        return request({\n            method: Method.GET,\n            url: `/${this.COMPONENT_NAME}`,\n            params: {\n                filter: {\n                    order: \"createdAt DESC\",\n                },\n            },\n        });\n    };\n\n    static create = (data: ICategoryBlog) => {\n        return request({\n            method: Method.POST,\n            url: `/${this.COMPONENT_NAME}`,\n            data,\n        });\n    };\n\n    static update = (id: number, data: ICategoryBlog) => {\n        return request({\n            method: Method.PATCH,\n            url: `/${this.COMPONENT_NAME}/${id}`,\n            data,\n        });\n    };\n\n    static delete = (id: number) => {\n        return request({\n            method: Method.DELETE,\n            url: `/${this.COMPONENT_NAME}/${id}`,\n        });\n    };\n}\n","import { Form, Input, InputNumber } from \"antd\";\n\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n  editing: boolean;\n  dataIndex: string;\n  title: string;\n  inputType: \"number\" | \"text\";\n  record: unknown;\n  index: number;\n  children: React.ReactNode;\n}\n\nexport const EditableCell: React.FC<EditableCellProps> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === \"number\" ? <InputNumber /> : <Input />;\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n","import { CheckOutlined, CloseOutlined, CopyOutlined, DeleteOutlined, EditOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Form, message, Popconfirm, Row, Table, Tooltip, Typography } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { CategoryBlogAPI } from \"../../apis/categoryBlog.api\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport {\n    AddCategoryBlog,\n    UpdateCategoryBlog,\n    DeleteCategoryBlog,\n    SetCategoryBlog,\n    GetCategoryBlog,\n} from \"../../app/reducers/CategoryBlog/CategoryBlog.reducer\";\nimport { EditableCell } from \"../../components/edit-table-cell\";\nimport { ICategoryBlog } from \"../../interface/CategoryBlog.interface\";\n\nconst { Title } = Typography;\n\nexport default function CategoryBlog() {\n    const data = useAppSelector(GetCategoryBlog);\n    const dispatch = useAppDispatch();\n    useEffect(() => {\n        CategoryBlogAPI.fetchAll().then((result: any) => {\n            dispatch(SetCategoryBlog(result.data));\n        });\n    }, [dispatch]);\n    const [form] = Form.useForm();\n    const isEditing = (record: ICategoryBlog) => record.id === editingKey;\n    const [editingKey, setEditingKey] = useState<number | undefined>();\n\n    const edit = (record: Partial<ICategoryBlog>) => {\n        form.setFieldsValue({ ...record });\n        setEditingKey(record.id);\n    };\n\n    const cancel = () => {\n        setEditingKey(undefined);\n    };\n    const save = (id?: number) => {\n        try {\n            if (id) {\n                const values = form.getFieldsValue() as ICategoryBlog;\n                let isError = false;\n                const errors = form.getFieldsError();\n\n                errors.forEach((el) => {\n                    if (el.errors.length > 0) {\n                        isError = true;\n                    }\n                });\n\n                if (!isError) {\n                    CategoryBlogAPI.update(id, values).then((result: any) => {\n                        setEditingKey(undefined);\n                        dispatch(UpdateCategoryBlog(result.data));\n                    });\n                } else {\n                    message.error(\"Validate Failed\");\n                }\n            } else {\n                message.error(\"Validate Failed\");\n            }\n        } catch (errInfo) {\n            console.log(\"Validate Failed:\", errInfo);\n        }\n    };\n    const duplicate = (record: Partial<ICategoryBlog>) => {\n        CategoryBlogAPI.create({\n            title: record.title,\n        }).then((result: any) => {\n            dispatch(AddCategoryBlog(result.data));\n        });\n    };\n    const remove = (record: Partial<ICategoryBlog>) => {\n        if (record.id) {\n            CategoryBlogAPI.delete(record.id).then((result: any) => {\n                dispatch(DeleteCategoryBlog(record));\n            });\n        }\n    };\n    const columns = [\n        {\n            title: \"STT\",\n            dataIndex: \"id\",\n            render: (_: null, record: ICategoryBlog) => {\n                const idx = data.findIndex((el: ICategoryBlog) => el.id === record.id);\n                return <Typography.Title level={5}>{idx + 1}</Typography.Title>;\n            },\n        },\n        {\n            title: \"Tiêu đề\",\n            dataIndex: \"title\",\n            width: \"30%\",\n            editable: true,\n        },\n        {\n            title: \"Thiết lập\",\n            render: (_: null, record: ICategoryBlog) => {\n                const editTable = isEditing(record);\n                return editTable ? (\n                    <>\n                        <Tooltip title=\"Lưu\">\n                            <Typography.Link className=\"mr-4\" onClick={() => save(record.id)}>\n                                <CheckOutlined style={{ fontSize: \"130%\" }} />\n                            </Typography.Link>\n                        </Tooltip>\n                        <Tooltip title=\"Đóng\">\n                            <Typography.Link onClick={cancel}>\n                                <CloseOutlined style={{ fontSize: \"130%\" }} />\n                            </Typography.Link>\n                        </Tooltip>\n                    </>\n                ) : (\n                    <>\n                        <Tooltip title=\"Sửa\">\n                            <Typography.Link className=\"mr-4\" disabled={editingKey !== undefined} onClick={() => edit(record)}>\n                                <EditOutlined style={{ fontSize: \"130%\" }} />\n                            </Typography.Link>\n                        </Tooltip>\n                        <Popconfirm\n                            title=\"Bạn có chắc chắn muốn xóa không?\"\n                            onConfirm={() => {\n                                remove(record);\n                            }}\n                        >\n                            <Typography.Link className=\"mr-4\">\n                                <DeleteOutlined style={{ fontSize: \"130%\" }} />\n                            </Typography.Link>\n                        </Popconfirm>\n\n                        <Popconfirm title=\"Bạn có muốn nhân bản danh mục này không?\" onConfirm={() => duplicate(record)}>\n                            <Typography.Link>\n                                <CopyOutlined style={{ fontSize: \"130%\" }} />\n                            </Typography.Link>\n                        </Popconfirm>\n                    </>\n                );\n            },\n        },\n    ];\n\n    const mergedColumns = columns.map((col) => {\n        if (!col.editable) {\n            return col;\n        }\n        return {\n            ...col,\n            onCell: (record: ICategoryBlog) => ({\n                record: record,\n                inputType: col.dataIndex === \"price\" ? \"number\" : \"text\",\n                dataIndex: col.dataIndex,\n                title: col.title,\n                editing: isEditing(record),\n            }),\n        };\n    });\n\n    const add = () => {\n        CategoryBlogAPI.create({\n            title: \"CategoryBlog\",\n        }).then((result: any) => {\n            dispatch(AddCategoryBlog(result.data));\n        });\n    };\n    return (\n        <>\n            <Row>\n                <Title level={3}>Danh mục bài viết</Title>\n            </Row>\n            <Row className=\"mb-4\">\n                <Button type=\"primary\" icon={<PlusOutlined />} className=\"mr-4\" onClick={add}>\n                    Thêm mới\n                </Button>\n            </Row>\n            <Form form={form} component={false}>\n                <Table\n                    columns={mergedColumns}\n                    components={{\n                        body: {\n                            cell: EditableCell,\n                        },\n                    }}\n                    dataSource={data}\n                    bordered\n                    rowKey=\"id\"\n                    pagination={{ pageSize: 10 }}\n                />\n            </Form>\n        </>\n    );\n}\n"],"names":["CategoryBlogAPI","_createClass","_classCallCheck","COMPONENT_NAME","fetchAll","request","method","Method","url","concat","params","filter","order","create","data","update","id","delete","EditableCell","_ref","editing","dataIndex","title","inputType","children","record","index","restProps","_objectWithoutProperties","_excluded","inputNode","_jsx","InputNumber","Input","_objectSpread","Form","name","style","margin","rules","required","message","Title","Typography","CategoryBlog","useAppSelector","GetCategoryBlog","dispatch","useAppDispatch","useEffect","then","result","SetCategoryBlog","_Form$useForm","form","_slicedToArray","isEditing","editingKey","_useState","useState","_useState2","setEditingKey","cancel","undefined","mergedColumns","render","_","idx","findIndex","el","level","width","editable","_jsxs","_Fragment","Tooltip","className","onClick","values","getFieldsValue","isError","getFieldsError","forEach","errors","length","UpdateCategoryBlog","errInfo","console","log","save","CheckOutlined","fontSize","CloseOutlined","disabled","setFieldsValue","edit","EditOutlined","Popconfirm","onConfirm","DeleteCategoryBlog","remove","DeleteOutlined","AddCategoryBlog","duplicate","CopyOutlined","map","col","onCell","Row","Button","type","icon","PlusOutlined","component","Table","columns","components","body","cell","dataSource","bordered","rowKey","pagination","pageSize"],"sourceRoot":""}