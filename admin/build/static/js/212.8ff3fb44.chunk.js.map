{"version":3,"file":"static/js/212.8ff3fb44.chunk.js","mappings":"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","sources":["apis/order.api.ts","components/dashboard/DashboardOrderByAmount.tsx","components/dashboard/DashboardOrderByRevenue.tsx","pages/dashboard/index.tsx"],"sourcesContent":["import { Method, request } from \"../helper/request.helper\";\r\nimport { IOrder } from \"../interface/Order.interface\";\r\n\r\nexport class OrderAPI {\r\n  static readonly COMPONENT_NAME: string = \"Orders\";\r\n\r\n  static fetchAll = () => {\r\n    return request({\r\n      method: Method.GET,\r\n      url: `/${this.COMPONENT_NAME}`,\r\n      params: {\r\n        filter: {\r\n          order: \"createdAt DESC\",\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  static createMulti = (req: IOrder[]) => {\r\n    return request({\r\n      method: Method.POST,\r\n      url: `/${this.COMPONENT_NAME}`,\r\n      data: req,\r\n    });\r\n  };\r\n\r\n  static create = (data: IOrder) => {\r\n    return request({\r\n      method: Method.POST,\r\n      url: `/${this.COMPONENT_NAME}`,\r\n      data,\r\n    });\r\n  };\r\n\r\n  static update = (id: number, data: IOrder) => {\r\n    return request({\r\n      method: Method.PATCH,\r\n      url: `/${this.COMPONENT_NAME}/${id}`,\r\n      data,\r\n    });\r\n  };\r\n\r\n  static delete = (id: number) => {\r\n    return request({\r\n      method: Method.DELETE,\r\n      url: `/${this.COMPONENT_NAME}/${id}`,\r\n    });\r\n  };\r\n\r\n  static statisticAmount = (year: number) => {\r\n    return request({\r\n      method: Method.GET,\r\n      url: `/${this.COMPONENT_NAME}/statistic-amount`,\r\n      params: {\r\n        year,\r\n      },\r\n    });\r\n  };\r\n\r\n  static statisticRevenue = (year: number) => {\r\n    return request({\r\n      method: Method.GET,\r\n      url: `/${this.COMPONENT_NAME}/statistic-revenue`,\r\n      params: {\r\n        year,\r\n      },\r\n    });\r\n  };\r\n}\r\n","import {\r\n  BarElement,\r\n  CategoryScale,\r\n  Chart as ChartJS,\r\n  Legend,\r\n  LinearScale,\r\n  Title,\r\n  Tooltip,\r\n} from \"chart.js\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\nimport { OrderAPI } from \"../../apis/order.api\";\r\nimport { IOrderStatisticAmount } from \"../../interface/response/OrderStatisticAmount.interface\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function DashboardOrderByAmount() {\r\n  const [year, setYear] = useState<any>(new Date());\r\n  const [labels, setLabels] = useState<string[]>([]);\r\n  const [dataAmount, setDataAmount] = useState<number[]>([]);\r\n  useEffect(() => {\r\n    search();\r\n    // eslint-disable-next-line\r\n  }, [year]); \r\n\r\n  const search = async () => {\r\n    OrderAPI.statisticAmount(year.getFullYear()).then((result) => {\r\n      const res = result.data as IOrderStatisticAmount[];\r\n      let respLabels: string[] = [];\r\n      let respData: number[] = [];\r\n      res.forEach((item: IOrderStatisticAmount) => {\r\n        respLabels.push(item.label);\r\n        respData.push(item.amount);\r\n      });\r\n      setLabels(respLabels);\r\n      setDataAmount(respData);\r\n    });\r\n  };\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: \"Thống kê đơn hàng theo số lượng\",\r\n        backgroundColor: \"rgb(255, 99, 132)\",\r\n        borderColor: \"rgb(255, 99, 132)\",\r\n        data: dataAmount,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <DatePicker\r\n          onChange={(value) => setYear(value)}\r\n          value={year}\r\n          onlyYearPicker\r\n          format=\"YYYY\"\r\n        />\r\n      </div>\r\n      <Bar data={data} />\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  BarElement,\r\n  CategoryScale,\r\n  Chart as ChartJS,\r\n  Legend,\r\n  LinearScale,\r\n  Title,\r\n  Tooltip,\r\n} from \"chart.js\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\nimport { OrderAPI } from \"../../apis/order.api\";\r\nimport { IOrderStatisticRevenue } from \"../../interface/response/OrderStatisticRevenue.interface\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function DashboardOrderByRevenue() {\r\n  const [year, setYear] = useState<any>(new Date());\r\n  const [labels, setLabels] = useState<string[]>([]);\r\n  const [dataRevenue, setDataRevenue] = useState<number[]>([]);\r\n\r\n  const search = async () => {\r\n    OrderAPI.statisticRevenue(year.getFullYear()).then((result) => {\r\n      const res = result.data as IOrderStatisticRevenue[];\r\n      let respLabels: string[] = [];\r\n      let respData: number[] = [];\r\n      res.forEach((item: IOrderStatisticRevenue) => {\r\n        respLabels.push(item.label);\r\n        respData.push(item.revenue);\r\n      });\r\n      setLabels(respLabels);\r\n      setDataRevenue(respData);\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    search();\r\n    // eslint-disable-next-line\r\n  }, [year]);\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: \"Thống kê đơn hàng theo doanh thu\",\r\n        backgroundColor: \"rgb(46, 54, 80)\",\r\n        borderColor: \"rgb(255, 99, 132)\",\r\n        data: dataRevenue,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mt-4\">\r\n        <DatePicker\r\n          onChange={(value) => setYear(value)}\r\n          value={year}\r\n          onlyYearPicker\r\n          format=\"YYYY\"\r\n        />\r\n      </div>\r\n      <Bar data={data} />\r\n    </>\r\n  );\r\n}\r\n","import { Row } from \"antd\";\r\nimport { ArcElement, Chart as ChartJS, Legend, Tooltip } from \"chart.js\";\r\nimport DashboardOrderByAmount from \"../../components/dashboard/DashboardOrderByAmount\";\r\nimport DashboardOrderByRevenue from \"../../components/dashboard/DashboardOrderByRevenue\";\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nexport default function Dashboard() {\r\n  return (\r\n    <Row className=\"h-2/4\">\r\n      <DashboardOrderByAmount />\r\n      <DashboardOrderByRevenue />\r\n    </Row>\r\n  );\r\n}\r\n"],"names":["OrderAPI","_createClass","_classCallCheck","COMPONENT_NAME","fetchAll","request","method","Method","url","concat","params","filter","order","createMulti","req","data","create","update","id","delete","statisticAmount","year","statisticRevenue","DashboardOrderByAmount","_useState","useState","Date","_useState2","_slicedToArray","setYear","_useState3","_useState4","labels","setLabels","_useState5","_useState6","dataAmount","setDataAmount","useEffect","search","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","getFullYear","then","result","res","respLabels","respData","forEach","item","push","label","amount","stop","apply","arguments","datasets","backgroundColor","borderColor","_jsxs","_Fragment","children","_jsx","DatePicker","onChange","value","onlyYearPicker","format","Bar","DashboardOrderByRevenue","dataRevenue","setDataRevenue","revenue","className","Dashboard","Row","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","ArcElement"],"sourceRoot":""}