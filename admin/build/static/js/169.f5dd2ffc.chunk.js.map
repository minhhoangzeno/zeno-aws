{"version":3,"file":"static/js/169.f5dd2ffc.chunk.js","mappings":"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","sources":["components/loading/Loading.tsx","pages/reset-password/index.tsx"],"sourcesContent":["import Spin from \"antd/lib/spin\";\nimport \"./index.css\";\n\nconst SingleLoading = () => {\n  return (\n    <div className=\"loading\">\n      <Spin size=\"large\" />\n    </div>\n  );\n};\n\nexport default SingleLoading;\n","import { Button, Col, Form, Input, Layout, message, Row } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { AccountAPI } from \"../../apis/account.api\";\nimport SingleLoading from \"../../components/loading/Loading\";\nimport NotFound from \"../404\";\nimport \"./index.css\";\nconst { Content } = Layout;\n\ninterface IResetPassword {\n  password: string;\n  confirmPassword: string;\n}\nexport default function ResetPassword() {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const token = searchParams.get(\"token\");\n  const [available, setAvailable] = useState<boolean>(false);\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (token) {\n      AccountAPI.getMeWithToken(token)\n        .then(() => {\n          setAvailable(true);\n        })\n        .catch((err) => {\n          console.log(err);\n          setAvailable(false);\n        });\n    } else {\n      setAvailable(false);\n    }\n  }, [token]);\n  const onFinish = (values: IResetPassword) => {\n    if (values.password === values.confirmPassword && token) {\n      setLoading(true);\n      AccountAPI.resetPassword({ newPassword: values.password }, token)\n        .then((result) => {\n          setLoading(false);\n          // console.log(result);\n          message.success(\"Thành công, vui lòng đăng nhập lại!\");\n          navigate(\"/login\");\n        })\n        .catch((err) => {\n          setLoading(false);\n          console.log(err);\n          message.error(\"Login failed!\");\n        });\n    } else {\n      message.error(\"Mật khẩu nhập lại chưa đúng!\");\n    }\n  };\n\n  const onFinishFailed = () => {\n    message.error(\"Error\").then((r) => console.log(r));\n  };\n\n  return (\n    <>\n      {loading && <SingleLoading />}\n      {available ? (\n        <Content className=\"bg-[url('./bg.png')] bg-cover w-screen h-screen flex items-center justify-center\">\n          <Row className=\"w-[90%] h-[90%] flex rounded-3xl overflow-hidden\">\n            <Col\n              span={24}\n              className=\"bg-white h-full flex flex-col items-center justify-center\"\n            >\n              <Form\n                name=\"reset-password\"\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n              >\n                <ul>\n                  <li className=\"flex items-center mb-2\">\n                    <div className=\"title\">Mật khẩu mới</div>\n                    <Form.Item label=\"\" required name=\"password\">\n                      <Input.Password size=\"large\" />\n                    </Form.Item>\n                  </li>\n                  <li className=\"flex items-center mb-2\">\n                    <div className=\"title\">Nhập mật khẩu mới</div>\n                    <Form.Item label=\"\" required name=\"confirmPassword\">\n                      <Input.Password size=\"large\" />\n                    </Form.Item>\n                  </li>\n\n                  <li className=\"flex items-center mb-6\">\n                    <Form.Item>\n                      <Button type=\"primary\" htmlType=\"submit\">\n                        Xác nhận\n                      </Button>\n                    </Form.Item>\n                  </li>\n                </ul>\n              </Form>\n            </Col>\n          </Row>\n        </Content>\n      ) : (\n        <NotFound />\n      )}\n    </>\n  );\n}\n"],"names":["_jsx","className","children","Spin","size","Content","Layout","ResetPassword","navigate","useNavigate","_useSearchParams","useSearchParams","token","_slicedToArray","get","_useState","useState","_useState2","available","setAvailable","_useState3","_useState4","loading","setLoading","useEffect","AccountAPI","then","catch","err","console","log","_jsxs","_Fragment","SingleLoading","Row","Col","span","Form","name","onFinish","values","password","confirmPassword","newPassword","result","message","onFinishFailed","r","autoComplete","label","required","Input","Button","type","htmlType","NotFound"],"sourceRoot":""}