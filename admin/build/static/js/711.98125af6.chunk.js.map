{"version":3,"file":"static/js/711.98125af6.chunk.js","mappings":"iQAEaA,GAAUC,EAAAA,EAAAA,IAAA,SAAAD,KAAAE,EAAAA,EAAAA,GAAA,KAAAF,EAAA,IAAVA,EACKG,eAAyB,WAD9BH,EAGJI,SAAW,WAChB,OAAOC,EAAAA,EAAAA,GAAQ,CACbC,OAAQC,EAAAA,EAAAA,IACRC,IAAI,IAADC,OANIT,EAMOG,gBACdO,OAAQ,CACNC,OAAQ,CACNC,MAAO,oBAIf,EAbWZ,EAeJa,OAAS,SAACC,GACf,OAAOT,EAAAA,EAAAA,GAAQ,CACbC,OAAQC,EAAAA,EAAAA,OACRC,IAAI,IAADC,OAlBIT,EAkBOG,eAAc,KAAAM,OAAIK,IAEpC,E,iCCTMC,EAAqBC,EAAAA,EAAAA,MAAdC,EAAcD,EAAAA,EAAAA,UAEd,SAASE,IACtB,IAAMC,GAAOC,EAAAA,EAAAA,GAAeC,EAAAA,IACtBC,GAAWC,EAAAA,EAAAA,MAEjBC,EAAAA,EAAAA,YAAU,WACRxB,EAAWI,WAAWqB,MAAK,SAACC,GAC1BJ,GAASK,EAAAA,EAAAA,IAAWD,EAAOP,MAC7B,GACF,GAAG,CAACG,IAEJ,IAAMM,EAAU,CACd,CACEC,MAAO,MACPC,UAAW,KACXC,OAAQ,SAACC,EAASC,GAChB,IAAMC,EAAMf,EAAKgB,WAAU,SAACC,GAAY,OAAKA,EAAGtB,KAAOmB,EAAOnB,EAAE,IAChE,OAAOuB,EAAAA,EAAAA,KAACrB,EAAAA,EAAAA,MAAgB,CAACsB,MAAO,EAAEC,SAAEL,EAAM,GAC5C,GAEF,CACEL,MAAO,uBACPC,UAAW,UACXU,MAAO,OAET,CACEX,MAAO,gBACPC,UAAW,UACXU,MAAO,MACPT,OAAQ,SAACC,EAASC,GAChB,OACEI,EAAAA,EAAAA,KAACI,EAAAA,EAAO,CAACZ,MAAOI,EAAOS,QAASC,UAAU,SAAQJ,UAChDF,EAAAA,EAAAA,KAACpB,EAAS,CAAC2B,SAAU,CAAEC,KAAM,EAAGC,OAAQ,OAAQP,SAC7CN,EAAOS,WAIhB,GAGF,CACEb,MAAO,4BACPC,UAAW,OACXU,MAAO,OAET,CACEX,MAAO,QACPC,UAAW,QACXU,MAAO,OAET,CACEX,MAAO,sBACPE,OAAQ,SAACC,EAASC,GAChB,OACEI,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CACTlB,MAAM,gEACNmB,UAAW,kBAAMC,EAAahB,EAAO,EAACM,UAEtCF,EAAAA,EAAAA,KAACrB,EAAAA,EAAAA,KAAe,CAACkC,UAAU,OAAMX,UAC/BF,EAAAA,EAAAA,KAACc,EAAAA,EAAc,CAACC,MAAO,CAAEC,SAAU,aAI3C,IAIEJ,EAAe,SAAChB,GAChBA,EAAOnB,IACTd,EAAAA,OAAkBiC,EAAOnB,IACtBW,MAAK,WACJH,GAASgC,EAAAA,EAAAA,IAAcrB,GACzB,IACCsB,OAAM,SAACC,GACNd,EAAAA,GAAAA,MAAc,QAChB,GAEN,EAEA,OACEe,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAnB,SAAA,EACEF,EAAAA,EAAAA,KAACsB,EAAAA,EAAG,CAAApB,UACFF,EAAAA,EAAAA,KAACtB,EAAK,CAACuB,MAAO,EAAEC,SAAC,uBAEnBF,EAAAA,EAAAA,KAACuB,EAAAA,EAAK,CAAChC,QAASA,EAASiC,WAAY1C,EAAM2C,UAAQ,EAACC,OAAO,SAGjE,C","sources":["apis/contact.api.ts","pages/contact/index.tsx"],"sourcesContent":["import { Method, request } from \"../helper/request.helper\";\n\nexport class ContactAPI {\n  static readonly COMPONENT_NAME: string = \"Contacts\";\n\n  static fetchAll = () => {\n    return request({\n      method: Method.GET,\n      url: `/${this.COMPONENT_NAME}`,\n      params: {\n        filter: {\n          order: \"createdAt DESC\",\n        },\n      },\n    });\n  };\n\n  static delete = (id: number) => {\n    return request({\n      method: Method.DELETE,\n      url: `/${this.COMPONENT_NAME}/${id}`,\n    });\n  };\n}\n","import { DeleteOutlined } from \"@ant-design/icons\";\nimport { message, Popconfirm, Row, Table, Tooltip, Typography } from \"antd\";\nimport { useEffect } from \"react\";\nimport { ContactAPI } from \"../../apis/contact.api\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport {\n  DeleteContact,\n  GetContact,\n  SetContact,\n} from \"../../app/reducers/Contact/Contact.reducer\";\nimport { IContact } from \"../../interface/Contact.interface\";\nimport { IProduct } from \"../../interface/Product.interface\";\n\nconst { Title, Paragraph } = Typography;\n\nexport default function Contact() {\n  const data = useAppSelector(GetContact);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    ContactAPI.fetchAll().then((result) => {\n      dispatch(SetContact(result.data));\n    });\n  }, [dispatch]);\n\n  const columns = [\n    {\n      title: \"STT\",\n      dataIndex: \"id\",\n      render: (_: null, record: IContact) => {\n        const idx = data.findIndex((el: IContact) => el.id === record.id);\n        return <Typography.Title level={5}>{idx + 1}</Typography.Title>;\n      },\n    },\n    {\n      title: \"Tiêu đề\",\n      dataIndex: \"subject\",\n      width: \"10%\",\n    },\n    {\n      title: \"Nội dung\",\n      dataIndex: \"message\",\n      width: \"30%\",\n      render: (_: null, record: IContact) => {\n        return (\n          <Tooltip title={record.message} placement=\"bottom\">\n            <Paragraph ellipsis={{ rows: 2, suffix: \"...\" }}>\n              {record.message}\n            </Paragraph>\n          </Tooltip>\n        );\n      },\n    },\n\n    {\n      title: \"Người gửi \",\n      dataIndex: \"name\",\n      width: \"10%\",\n    },\n    {\n      title: \"Email\",\n      dataIndex: \"email\",\n      width: \"15%\",\n    },\n    {\n      title: \"Thiết lập\",\n      render: (_: null, record: IContact) => {\n        return (\n          <Popconfirm\n            title=\"Bạn có chắc chắn muốn xóa không?\"\n            onConfirm={() => deleteRecord(record)}\n          >\n            <Typography.Link className=\"mr-4\">\n              <DeleteOutlined style={{ fontSize: \"130%\" }} />\n            </Typography.Link>\n          </Popconfirm>\n        );\n      },\n    },\n  ];\n\n  const deleteRecord = (record: IProduct) => {\n    if (record.id) {\n      ContactAPI.delete(record.id)\n        .then(() => {\n          dispatch(DeleteContact(record));\n        })\n        .catch((err) => {\n          message.error(\"Error\");\n        });\n    }\n  };\n\n  return (\n    <>\n      <Row>\n        <Title level={3}>Liên hệ</Title>\n      </Row>\n      <Table columns={columns} dataSource={data} bordered rowKey=\"id\" />\n    </>\n  );\n}\n"],"names":["ContactAPI","_createClass","_classCallCheck","COMPONENT_NAME","fetchAll","request","method","Method","url","concat","params","filter","order","delete","id","Title","Typography","Paragraph","Contact","data","useAppSelector","GetContact","dispatch","useAppDispatch","useEffect","then","result","SetContact","columns","title","dataIndex","render","_","record","idx","findIndex","el","_jsx","level","children","width","Tooltip","message","placement","ellipsis","rows","suffix","Popconfirm","onConfirm","deleteRecord","className","DeleteOutlined","style","fontSize","DeleteContact","catch","err","_jsxs","_Fragment","Row","Table","dataSource","bordered","rowKey"],"sourceRoot":""}