{"version":3,"file":"static/js/905.d054839f.chunk.js","mappings":"0JAWA,EARsB,WACpB,OACEA,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UACtBF,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAACC,KAAK,WAGjB,C,2NCTYC,EAAU,SAAVA,GAAU,OAAVA,EAAU,yBAAVA,EAAU,cAAVA,EAAU,YAAVA,CAAU,MCCtB,GAAgB,WAAa,2B,SCkBrBC,EAAYC,EAAAA,EAAAA,QACZC,EAAUC,EAAAA,EAAAA,MAOH,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAAkCC,EAAAA,EAAAA,UAAqB,CACrDC,MAAO,GACPC,SAAU,GACVC,UAAU,IACVC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAJKO,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAO9BI,GAA8BR,EAAAA,EAAAA,WAAkB,GAAMS,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/CE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GA4C1B,OACEG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAzB,SAAA,CACGsB,IAAWxB,EAAAA,EAAAA,KAAC4B,EAAAA,EAAa,KAC1B5B,EAAAA,EAAAA,KAACM,EAAO,CAACL,UAAU,mFAAkFC,UACnGwB,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAAC5B,UAAU,mDAAkDC,SAAA,EAC/DF,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CACFC,KAAM,EACN9B,UAAU,+EAA8EC,UAExFwB,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAAC7B,UAAU,8FAA6FC,SAAA,EAC1GF,EAAAA,EAAAA,KAACQ,EAAK,CACJP,UAAS,8DAAA+B,OAAgEC,EAAAA,YAAoB/B,SAC9F,mBAGDwB,EAAAA,EAAAA,MAAClB,EAAK,CAACP,UAAU,2CAA0CC,SAAA,CACxD,IAAI,qEAGPwB,EAAAA,EAAAA,MAACQ,EAAAA,GAAM,CACLC,QAAS,kBAAMxB,EAAS,YAAY,EACpCV,UAAU,gNAA+MC,SAAA,CAExN,IAAI,mBAKXwB,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CACFC,KAAM,GACN9B,UAAU,4DAA2DC,SAAA,EAErEF,EAAAA,EAAAA,KAACQ,EAAK,CAAC4B,MAAO,EAAElC,SAAC,8BACjBwB,EAAAA,EAAAA,MAACW,EAAAA,EAAI,CACHC,KAAK,QACLC,cAAenB,EACfoB,SA9EK,SAACC,GAChBhB,GAAW,GACXJ,EAAaoB,GACbC,EAAAA,EAAAA,MAAiBD,GACdE,MAAK,SAACC,GACLnB,GAAW,GACXoB,QAAQC,IAAIF,IAGZG,EAAAA,EAAAA,IAASH,EAAOI,KAAKC,GAAIR,EAAOxB,UAGhCyB,EAAAA,EAAAA,QACGC,MAAK,SAACC,GACL,IAAMM,EAAcN,EAAOI,KAEzBE,GACAA,EAAYC,OACZD,EAAYC,MAAMC,OAAS,GAC3BF,EAAYC,MAAM,GAAGb,OAASjC,EAAWgD,MAEzCC,EAAAA,GAAAA,QAAgB,iBAAiBX,OAEjChC,EAAS,eAET2C,EAAAA,GAAAA,MAAc,iBAElB,IACCC,OAAM,WACLD,EAAAA,GAAAA,MAAc,gBAChB,GACJ,IACCC,OAAM,SAACC,GACN/B,GAAW,GACXoB,QAAQC,IAAIU,GACZF,EAAAA,GAAAA,MAAc,gBAChB,GACJ,EA0CYG,eAxCW,WACrBH,EAAAA,GAAAA,MAAc,SAASX,MAAK,SAACe,GAAC,OAAKb,QAAQC,IAAIY,EAAE,GACnD,EAuCYC,aAAa,MAAKzD,SAAA,EAElBF,EAAAA,EAAAA,KAACqC,EAAAA,EAAAA,KAAS,CAACuB,MAAM,kCAAgBC,UAAQ,EAACvB,KAAK,QAAOpC,UACpDF,EAAAA,EAAAA,KAAC8D,EAAAA,EAAK,OAER9D,EAAAA,EAAAA,KAACqC,EAAAA,EAAAA,KAAS,CAACuB,MAAM,qBAAWC,UAAQ,EAACvB,KAAK,WAAUpC,UAClDF,EAAAA,EAAAA,KAAC8D,EAAAA,EAAAA,SAAc,CAAC1D,KAAK,aAEvBJ,EAAAA,EAAAA,KAACqC,EAAAA,EAAAA,KAAS,CAACC,KAAK,WAAWyB,cAAc,UAAS7D,UAChDF,EAAAA,EAAAA,KAACgE,EAAAA,EAAQ,CAAA9D,SAAC,mBAEZF,EAAAA,EAAAA,KAACqC,EAAAA,EAAAA,KAAS,CAAAnC,UACRF,EAAAA,EAAAA,KAACkC,EAAAA,GAAM,CAAC+B,KAAK,UAAUC,SAAS,SAAQhE,SAAC,0BAUzD,C","sources":["components/loading/Loading.tsx","interface/constants/UserLevels.const.ts","webpack://admin/./src/pages/login/Login.module.css?c066","pages/login/index.tsx"],"sourcesContent":["import Spin from \"antd/lib/spin\";\r\nimport \"./index.css\";\r\n\r\nconst SingleLoading = () => {\r\n  return (\r\n    <div className=\"loading\">\r\n      <Spin size=\"large\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleLoading;\r\n","export enum UserLevels {\r\n  SUPER_ADMIN = \"SUPERADMIN\",\r\n  ADMIN = \"ADMIN\",\r\n  USER = \"USER\",\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"titleWhite\":\"Login_titleWhite__QGHJM\"};","import {\r\n  Button,\r\n  Checkbox,\r\n  Col,\r\n  Form,\r\n  Input,\r\n  Layout,\r\n  message,\r\n  Row,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AccountAPI } from \"../../apis/account.api\";\r\nimport SingleLoading from \"../../components/loading/Loading\";\r\nimport { setToken } from \"../../helper/userToken\";\r\nimport { IAccount } from \"../../interface/Account.interface\";\r\nimport { UserLevels } from \"../../interface/constants/UserLevels.const\";\r\nimport styles from \"./Login.module.css\";\r\nconst { Content } = Layout;\r\nconst { Title } = Typography;\r\n\r\ninterface ILoginData {\r\n  email: string;\r\n  password: string;\r\n  remember: boolean;\r\n}\r\nexport default function Login() {\r\n  const navigate = useNavigate();\r\n  const [formValue, setFormValue] = useState<ILoginData>({\r\n    email: \"\",\r\n    password: \"\",\r\n    remember: false,\r\n  });\r\n\r\n  // sua code\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const onFinish = (values: ILoginData) => {\r\n    setLoading(true);\r\n    setFormValue(values);\r\n    AccountAPI.login(values)\r\n      .then((result) => {\r\n        setLoading(false);\r\n        console.log(result);\r\n\r\n        // Update user access token\r\n        setToken(result.data.id, values.remember);\r\n        // Show message toast\r\n\r\n        AccountAPI.getMe()\r\n          .then((result) => {\r\n            const currentUser = result.data as IAccount;\r\n            if (\r\n              currentUser &&\r\n              currentUser.roles &&\r\n              currentUser.roles.length > 0 &&\r\n              currentUser.roles[0].name !== UserLevels.USER\r\n            ) {\r\n              message.success(\"Login success\").then();\r\n              // Navigate to dashboard\r\n              navigate(\"/dashboard\");\r\n            } else {\r\n              message.error(\"Authorization!\");\r\n            }\r\n          })\r\n          .catch(() => {\r\n            message.error(\"Login failed!\");\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(err);\r\n        message.error(\"Login failed!\");\r\n      });\r\n  };\r\n\r\n  const onFinishFailed = () => {\r\n    message.error(\"Error\").then((r) => console.log(r));\r\n  };\r\n  return (\r\n    <>\r\n      {loading && <SingleLoading />}\r\n      <Content className=\"bg-[url('./bg.png')] bg-cover w-screen h-screen flex items-center justify-center\">\r\n        <Row className=\"w-[90%] h-[90%] flex rounded-3xl overflow-hidden\">\r\n          <Col\r\n            span={8}\r\n            className=\"h-full bg-gradient-to-tl from-[#3ba5b4] to-[#38ba8a] opacity-90 relative p-5\"\r\n          >\r\n            <Col className=\"absolute bottom-0 top-0 left-0 right-0 flex flex-col items-center justify-center text-white\">\r\n              <Title\r\n                className={`mt-[100px] lg:text-[30px] text-[40px] font-bold text-white ${styles.titleWhite}`}\r\n              >\r\n                Welcome Back!\r\n              </Title>\r\n              <Title className=\"max-w-[60%] text-center text-[16px] mt-5\">\r\n                {\" \"}\r\n                To keep contected with us please login with your personal info\r\n              </Title>\r\n              <Button\r\n                onClick={() => navigate(\"/register\")}\r\n                className=\"hover:bg-white hover:text-[#3aaea1] bg-transparent cursor-pointer uppercase text-center no-underline w-[200px] text-[14px] h-[55px] border-solid border-2 text-white leading-10 border-white rounded-3xl m-10\"\r\n              >\r\n                {\" \"}\r\n                Sign In\r\n              </Button>\r\n            </Col>\r\n          </Col>\r\n          <Col\r\n            span={16}\r\n            className=\"bg-white h-full flex flex-col items-center justify-center\"\r\n          >\r\n            <Title level={2}>Đăng nhập</Title>\r\n            <Form\r\n              name=\"login\"\r\n              initialValues={formValue}\r\n              onFinish={onFinish}\r\n              onFinishFailed={onFinishFailed}\r\n              autoComplete=\"off\"\r\n            >\r\n              <Form.Item label=\"Tên đăng nhập\" required name=\"email\">\r\n                <Input />\r\n              </Form.Item>\r\n              <Form.Item label=\"Mật khẩu\" required name=\"password\">\r\n                <Input.Password size=\"large\" />\r\n              </Form.Item>\r\n              <Form.Item name=\"remember\" valuePropName=\"checked\">\r\n                <Checkbox>Remember me</Checkbox>\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Content>\r\n    </>\r\n  );\r\n}\r\n"],"names":["_jsx","className","children","Spin","size","UserLevels","Content","Layout","Title","Typography","Login","navigate","useNavigate","_useState","useState","email","password","remember","_useState2","_slicedToArray","formValue","setFormValue","_useState3","_useState4","loading","setLoading","_jsxs","_Fragment","SingleLoading","Row","Col","span","concat","styles","Button","onClick","level","Form","name","initialValues","onFinish","values","AccountAPI","then","result","console","log","setToken","data","id","currentUser","roles","length","USER","message","catch","err","onFinishFailed","r","autoComplete","label","required","Input","valuePropName","Checkbox","type","htmlType"],"sourceRoot":""}