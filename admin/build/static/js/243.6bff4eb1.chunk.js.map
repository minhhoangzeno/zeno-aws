{"version":3,"file":"static/js/243.6bff4eb1.chunk.js","mappings":"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","sources":["components/loading/Loading.tsx","helper/getAddress.helper.ts","pages/register/index.tsx"],"sourcesContent":["import Spin from \"antd/lib/spin\";\nimport \"./index.css\";\n\nconst SingleLoading = () => {\n  return (\n    <div className=\"loading\">\n      <Spin size=\"large\" />\n    </div>\n  );\n};\n\nexport default SingleLoading;\n","import axios from \"axios\";\n\nexport const getAddress = () => {\n  return axios\n    .get(\"https://provinces.open-api.vn/api/?depth=2\")\n    .then((result) => {\n      return result.data;\n    })\n    .catch((err) => console.log(\"err\"));\n};\n","import {\n    Button,\n    Checkbox,\n    Col,\n    Form,\n    Input,\n    Layout,\n    message,\n    Row,\n    Select,\n    Typography\n} from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport SingleLoading from \"../../components/loading/Loading\";\nimport { getAddress } from \"../../helper/getAddress.helper\";\nimport { IAccount } from \"../../interface/Account.interface\";\nimport { ICity, IDistrict } from \"../../interface/Address.interface\";\n\nconst { Content } = Layout;\nconst { Title } = Typography;\nconst { Option } = Select;\n\ninterface IRegister {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  password?: string;\n  confirmPassword?: string;\n  city?: number;\n  district?: number;\n  checkRead?: boolean;\n}\n\nexport default function Register() {\n  const navigate = useNavigate();\n  const [form] = Form.useForm();\n  const [citys, setCitys] = useState<ICity[]>([]);\n\n  const [districts, setDistricts] = useState<IDistrict[]>([]);\n  const [formValue, setFormValue] = useState<IRegister>({\n    city: 1,\n    district: 1,\n    checkRead: false,\n  });\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    searchAddress();\n  }, []);\n\n  useEffect(() => {\n    // changeCity();\n  }, [formValue.city]);\n  const searchAddress = async () => {\n    const result = await getAddress();\n    setCitys(result);\n    setDistricts(result[0].districts);\n  };\n//   const changeCity = () => {\n//     const index = citys.findIndex((el) => el.code === formValue.city);\n//     if (index > -1) {\n//       const data = citys[index].districts;\n//       setDistricts(citys[index].districts);\n//       form.setFieldValue(\"district\", data[0].code);\n//       setFormValue((f) => ({\n//         ...f,\n//         district: data[0].code,\n//       }));\n//     }\n//   };\n  const onFinish = (values: IAccount) => {\n    setLoading(true);\n    console.log(\"values\", values);\n  };\n  const onFinishFailed = () => {\n    message.error(\"Error\").then((r) => console.log(r));\n  };\n\n  const onValuesChange = () => {\n    const values = form.getFieldsValue();\n    setFormValue(values);\n    console.log(values);\n  };\n\n  return (\n    <>\n      {loading && <SingleLoading />}\n      <Content className=\"bg-[url('./bg.png')] bg-cover w-screen h-screen flex items-center justify-center\">\n        <Row className=\"w-[90%] h-[90%] flex rounded-3xl overflow-hidden\">\n          <Col\n            span={16}\n            className=\"bg-white h-full flex flex-col items-center justify-center\"\n          >\n            <Title level={2}>Đăng ký</Title>\n            <Form\n              name=\"register\"\n              initialValues={formValue}\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n              autoComplete=\"off\"\n              form={form}\n              onValuesChange={onValuesChange}\n              labelCol={{ span: 10 }}\n              labelAlign=\"left\"\n              layout=\"horizontal\"\n            >\n              <Form.Item label=\"Họ\" required name=\"firstName\">\n                <Input />\n              </Form.Item>\n              <Form.Item label=\"Tên\" required name=\"lastName\">\n                <Input />\n              </Form.Item>\n              <Form.Item label=\"Tên đăng nhập\" required name=\"email\">\n                <Input />\n              </Form.Item>\n              <Form.Item label=\"Mật khẩu\" required name=\"password\">\n                <Input.Password size=\"large\" />\n              </Form.Item>\n              <Form.Item\n                label=\"Xác nhận mật khẩu\"\n                required\n                name=\"confirmPassword\"\n              >\n                <Input.Password size=\"large\" />\n              </Form.Item>\n              <Form.Item label=\"Tỉnh\" required name=\"city\">\n                <Select style={{ width: 180 }}>\n                  {citys.length > 0 &&\n                    citys.map((city: ICity, index: number) => {\n                      return (\n                        <Option key={index} value={city.code}>\n                          {city.name}\n                        </Option>\n                      );\n                    })}\n                </Select>\n              </Form.Item>\n              <Form.Item label=\"Huyện\" required name=\"district\">\n                <Select style={{ width: 180 }}>\n                  {districts.length > 0 &&\n                    districts.map((district: IDistrict, index: number) => {\n                      return (\n                        <Option key={index} value={district.code}>\n                          {district.name}\n                        </Option>\n                      );\n                    })}\n                </Select>\n              </Form.Item>\n              <Form.Item label=\"\" name=\"checkRead\" valuePropName=\"checked\">\n                <Checkbox>Ban da doc va dong y</Checkbox>\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </Col>\n          <Col\n            span={8}\n            className=\"h-full bg-gradient-to-tl from-[#3ba5b4] to-[#38ba8a] opacity-90 relative p-5\"\n          >\n            <Col className=\"absolute bottom-0 top-0 left-0 right-0 flex flex-col items-center justify-center text-white\">\n              <Title\n                className={`mt-[100px] lg:text-[30px] text-[40px] font-bold text-white `}\n              >\n                Welcome Back!\n              </Title>\n              <Title className=\"max-w-[60%] text-center text-[16px] mt-5\">\n                {\" \"}\n                To keep contected with us please login with your personal info\n              </Title>\n              <Button\n                onClick={() => navigate(\"/login\")}\n                className=\"hover:bg-white hover:text-[#3aaea1] bg-transparent cursor-pointer uppercase text-center no-underline w-[200px] text-[14px] h-[55px] border-solid border-2 text-white leading-10 border-white rounded-3xl m-10\"\n              >\n                {\" \"}\n                Sign Up\n              </Button>\n            </Col>\n          </Col>\n        </Row>\n      </Content>\n    </>\n  );\n}\n"],"names":["_jsx","className","children","Spin","size","getAddress","axios","then","result","data","catch","err","console","log","Content","Layout","Title","Typography","Option","Select","Register","navigate","useNavigate","_Form$useForm","Form","form","_slicedToArray","_useState","useState","_useState2","citys","setCitys","_useState3","_useState4","districts","setDistricts","_useState5","city","district","checkRead","_useState6","formValue","setFormValue","_useState7","_useState8","loading","setLoading","useEffect","searchAddress","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sent","stop","apply","arguments","_jsxs","_Fragment","SingleLoading","Row","Col","span","level","name","initialValues","onFinish","values","onFinishFailed","message","r","autoComplete","onValuesChange","getFieldsValue","labelCol","labelAlign","layout","label","required","Input","style","width","length","map","index","value","code","valuePropName","Checkbox","Button","type","htmlType","onClick"],"sourceRoot":""}