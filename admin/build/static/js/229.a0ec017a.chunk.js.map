{"version":3,"file":"static/js/229.a0ec017a.chunk.js","mappings":"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","sources":["components/loading/Loading.tsx","interface/constants/UserLevels.const.ts","pages/login/index.tsx"],"sourcesContent":["import Spin from \"antd/lib/spin\";\nimport \"./index.css\";\n\nconst SingleLoading = () => {\n  return (\n    <div className=\"loading\">\n      <Spin size=\"large\" />\n    </div>\n  );\n};\n\nexport default SingleLoading;\n","export enum UserLevels {\n  ADMIN = \"ADMIN\",\n  LEADER = \"LEADER\",\n  USER = \"USER\",\n}\n","import { Button, Checkbox, Col, Form, Input, Layout, message, Row, Typography } from 'antd';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AccountAPI } from '../../apis/account.api';\nimport SingleLoading from '../../components/loading/Loading';\nimport { setToken } from '../../helper/userToken';\nimport { IAccount } from '../../interface/Account.interface';\nimport { UserLevels } from '../../interface/constants/UserLevels.const';\nimport './index.css';\nimport { SetTarget } from '../../app/reducers/Target/Target.reducer';\nimport { useAppDispatch } from '../../app/hooks';\nconst { Content } = Layout;\n\ninterface ILoginData {\n  email: string;\n  password: string;\n  remember: boolean;\n}\nexport default function Login() {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const [formValue, setFormValue] = useState<ILoginData>({\n    email: '',\n    password: '',\n    remember: false,\n  });\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const onFinish = (values: ILoginData) => {\n    setLoading(true);\n    setFormValue(values);\n    AccountAPI.login(values)\n      .then((result) => {\n        setLoading(false);\n\n        // Update user access token\n        setToken(result.data.id, values.remember);\n        // Show message toast\n\n        AccountAPI.getMe()\n          .then((result) => {\n            const currentUser = result.data as IAccount;\n            if (currentUser && currentUser.roles && currentUser.roles.length > 0 && currentUser.roles[0].name !== UserLevels.USER) {\n              message.success('Login success').then();\n              // Navigate to dashboard\n              navigate('/dashboard');\n              dispatch(SetTarget(true));\n            } else {\n              message.error('Authorization!');\n            }\n          })\n          .catch(() => {\n            message.error('Login failed!');\n          });\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n        message.error('Login failed!');\n      });\n  };\n\n  const onFinishFailed = () => {\n    message.error('Error').then((r) => console.log(r));\n  };\n\n  // let urlToChangeStream =\n  //   \"http://localhost:3000/api/Orders/change-stream?_format=event-stream\";\n  // let src = new EventSource(urlToChangeStream);\n  // src.addEventListener(\"data\", function (msg) {\n  //   let data = JSON.parse(msg.data);\n  //   message.info(data.type)\n\n  // });\n  return (\n    <>\n      {loading && <SingleLoading />}\n      <Content className=\"bg-[url('./bg.png')] bg-cover w-screen h-screen flex items-center justify-center\">\n        <Row className=\"w-[90%] h-[90%] flex rounded-3xl overflow-hidden\">\n          <Col\n            span={24}\n            className=\"bg-white h-full flex flex-col items-center justify-center\">\n            <Form\n              name=\"login\"\n              initialValues={formValue}\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n              autoComplete=\"off\">\n              <ul>\n                <li className=\"flex items-center mb-6\">\n                  <div className=\"title\">Email</div>\n                  <Form.Item\n                    label=\"\"\n                    required\n                    name=\"email\">\n                    <Input />\n                  </Form.Item>\n                </li>\n                <li className=\"flex items-center mb-2\">\n                  <div className=\"title\">Mật khẩu</div>\n                  <Form.Item\n                    label=\"\"\n                    required\n                    name=\"password\">\n                    <Input.Password size=\"large\" />\n                  </Form.Item>\n                </li>\n                <li className=\"flex mb-6 items-center justify-end\">\n                  <Typography.Link\n                    onClick={() => {\n                      navigate('/forgot-password');\n                    }}>\n                    Quên mật khẩu\n                  </Typography.Link>\n                </li>\n                <li className=\"flex items-center mb-6\">\n                  <Form.Item\n                    name=\"remember\"\n                    valuePropName=\"checked\">\n                    <Checkbox>Ghi nhớ mật khẩu</Checkbox>\n                  </Form.Item>\n                </li>\n                <li className=\"flex items-center mb-6\">\n                  <Form.Item>\n                    <Button\n                      type=\"primary\"\n                      htmlType=\"submit\">\n                      Đăng nhập\n                    </Button>\n                  </Form.Item>\n                </li>\n              </ul>\n            </Form>\n          </Col>\n        </Row>\n      </Content>\n    </>\n  );\n}\n"],"names":["_jsx","className","children","Spin","size","UserLevels","Content","Layout","Login","dispatch","useAppDispatch","navigate","useNavigate","_useState","useState","email","password","remember","_useState2","_slicedToArray","formValue","setFormValue","_useState3","_useState4","loading","setLoading","_jsxs","_Fragment","SingleLoading","Row","Col","span","Form","name","initialValues","onFinish","values","AccountAPI","then","result","setToken","data","id","currentUser","roles","length","message","SetTarget","catch","err","console","log","onFinishFailed","r","autoComplete","label","required","Input","Typography","onClick","valuePropName","Checkbox","Button","type","htmlType"],"sourceRoot":""}