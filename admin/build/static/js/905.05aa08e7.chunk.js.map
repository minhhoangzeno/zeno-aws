{"version":3,"file":"static/js/905.05aa08e7.chunk.js","mappings":"0JAWA,EARsB,WACpB,OACEA,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UACtBF,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAACC,KAAK,WAGjB,C,2NCTYC,EAAU,SAAVA,GAAU,OAAVA,EAAU,yBAAVA,EAAU,cAAVA,EAAU,YAAVA,CAAU,MCCtB,GAAgB,WAAa,2B,SCkBrBC,EAAYC,EAAAA,EAAAA,QACZC,EAAUC,EAAAA,EAAAA,MAOH,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAAkCC,EAAAA,EAAAA,UAAqB,CACrDC,MAAO,GACPC,SAAU,GACVC,UAAU,IACVC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAJKO,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAO9BI,GAA8BR,EAAAA,EAAAA,WAAkB,GAAMS,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/CE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GA4C1B,OACEG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAzB,SAAA,CACGsB,IAAWxB,EAAAA,EAAAA,KAAC4B,EAAAA,EAAa,KAC1B5B,EAAAA,EAAAA,KAACM,EAAO,CAACL,UAAU,mFAAkFC,UACnGwB,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAAC5B,UAAU,mDAAkDC,SAAA,EAC/DF,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CACFC,KAAM,EACN9B,UAAU,+EAA8EC,UAExFwB,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAAC7B,UAAU,8FAA6FC,SAAA,EAC1GF,EAAAA,EAAAA,KAACQ,EAAK,CACJP,UAAS,8DAAA+B,OAAgEC,EAAAA,YAAoB/B,SAC9F,mBAGDwB,EAAAA,EAAAA,MAAClB,EAAK,CAACP,UAAU,2CAA0CC,SAAA,CACxD,IAAI,qEAGPwB,EAAAA,EAAAA,MAACQ,EAAAA,GAAM,CACLC,QAAS,kBAAMxB,EAAS,YAAY,EACpCV,UAAU,gNAA+MC,SAAA,CAExN,IAAI,mBAKXwB,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CACFC,KAAM,GACN9B,UAAU,4DAA2DC,SAAA,EAErEF,EAAAA,EAAAA,KAACQ,EAAK,CAAC4B,MAAO,EAAElC,SAAC,8BACjBwB,EAAAA,EAAAA,MAACW,EAAAA,EAAI,CACHC,KAAK,QACLC,cAAenB,EACfoB,SA9EK,SAACC,GAChBhB,GAAW,GACXJ,EAAaoB,GACbC,EAAAA,EAAAA,MAAiBD,GACdE,MAAK,SAACC,GACLnB,GAAW,GACXoB,QAAQC,IAAIF,IAGZG,EAAAA,EAAAA,IAASH,EAAOI,KAAKC,GAAIR,EAAOxB,UAGhCyB,EAAAA,EAAAA,QACGC,MAAK,SAACC,GACL,IAAMM,EAAcN,EAAOI,KAEzBE,GACAA,EAAYC,OACZD,EAAYC,MAAMC,OAAS,GAC3BF,EAAYC,MAAM,GAAGb,OAASjC,EAAWgD,MAEzCC,EAAAA,GAAAA,QAAgB,iBAAiBX,OAEjChC,EAAS,eAET2C,EAAAA,GAAAA,MAAc,iBAElB,IACCC,OAAM,WACLD,EAAAA,GAAAA,MAAc,gBAChB,GACJ,IACCC,OAAM,SAACC,GACN/B,GAAW,GACXoB,QAAQC,IAAIU,GACZF,EAAAA,GAAAA,MAAc,gBAChB,GACJ,EA0CYG,eAxCW,WACrBH,EAAAA,GAAAA,MAAc,SAASX,MAAK,SAACe,GAAC,OAAKb,QAAQC,IAAIY,EAAE,GACnD,EAuCYC,aAAa,MAAKzD,SAAA,EAElBF,EAAAA,EAAAA,KAACqC,EAAAA,EAAAA,KAAS,CAACuB,MAAM,kCAAgBC,UAAQ,EAACvB,KAAK,QAAOpC,UACpDF,EAAAA,EAAAA,KAAC8D,EAAAA,EAAK,OAER9D,EAAAA,EAAAA,KAACqC,EAAAA,EAAAA,KAAS,CAACuB,MAAM,qBAAWC,UAAQ,EAACvB,KAAK,WAAUpC,UAClDF,EAAAA,EAAAA,KAAC8D,EAAAA,EAAAA,SAAc,CAAC1D,KAAK,aAEvBJ,EAAAA,EAAAA,KAACqC,EAAAA,EAAAA,KAAS,CAACC,KAAK,WAAWyB,cAAc,UAAS7D,UAChDF,EAAAA,EAAAA,KAACgE,EAAAA,EAAQ,CAAA9D,SAAC,mBAEZF,EAAAA,EAAAA,KAACqC,EAAAA,EAAAA,KAAS,CAAAnC,UACRF,EAAAA,EAAAA,KAACkC,EAAAA,GAAM,CAAC+B,KAAK,UAAUC,SAAS,SAAQhE,SAAC,0BAUzD,C","sources":["components/loading/Loading.tsx","interface/constants/UserLevels.const.ts","webpack://admin/./src/pages/login/Login.module.css?c066","pages/login/index.tsx"],"sourcesContent":["import Spin from \"antd/lib/spin\";\nimport \"./index.css\";\n\nconst SingleLoading = () => {\n  return (\n    <div className=\"loading\">\n      <Spin size=\"large\" />\n    </div>\n  );\n};\n\nexport default SingleLoading;\n","export enum UserLevels {\n  SUPER_ADMIN = \"SUPERADMIN\",\n  ADMIN = \"ADMIN\",\n  USER = \"USER\",\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"titleWhite\":\"Login_titleWhite__5Omsk\"};","import {\n  Button,\n  Checkbox,\n  Col,\n  Form,\n  Input,\n  Layout,\n  message,\n  Row,\n  Typography,\n} from \"antd\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountAPI } from \"../../apis/account.api\";\nimport SingleLoading from \"../../components/loading/Loading\";\nimport { setToken } from \"../../helper/userToken\";\nimport { IAccount } from \"../../interface/Account.interface\";\nimport { UserLevels } from \"../../interface/constants/UserLevels.const\";\nimport styles from \"./Login.module.css\";\nconst { Content } = Layout;\nconst { Title } = Typography;\n\ninterface ILoginData {\n  email: string;\n  password: string;\n  remember: boolean;\n}\nexport default function Login() {\n  const navigate = useNavigate();\n  const [formValue, setFormValue] = useState<ILoginData>({\n    email: \"\",\n    password: \"\",\n    remember: false,\n  });\n\n  // sua code\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const onFinish = (values: ILoginData) => {\n    setLoading(true);\n    setFormValue(values);\n    AccountAPI.login(values)\n      .then((result) => {\n        setLoading(false);\n        console.log(result);\n\n        // Update user access token\n        setToken(result.data.id, values.remember);\n        // Show message toast\n\n        AccountAPI.getMe()\n          .then((result) => {\n            const currentUser = result.data as IAccount;\n            if (\n              currentUser &&\n              currentUser.roles &&\n              currentUser.roles.length > 0 &&\n              currentUser.roles[0].name !== UserLevels.USER\n            ) {\n              message.success(\"Login success\").then();\n              // Navigate to dashboard\n              navigate(\"/dashboard\");\n            } else {\n              message.error(\"Authorization!\");\n            }\n          })\n          .catch(() => {\n            message.error(\"Login failed!\");\n          });\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n        message.error(\"Login failed!\");\n      });\n  };\n\n  const onFinishFailed = () => {\n    message.error(\"Error\").then((r) => console.log(r));\n  };\n  return (\n    <>\n      {loading && <SingleLoading />}\n      <Content className=\"bg-[url('./bg.png')] bg-cover w-screen h-screen flex items-center justify-center\">\n        <Row className=\"w-[90%] h-[90%] flex rounded-3xl overflow-hidden\">\n          <Col\n            span={8}\n            className=\"h-full bg-gradient-to-tl from-[#3ba5b4] to-[#38ba8a] opacity-90 relative p-5\"\n          >\n            <Col className=\"absolute bottom-0 top-0 left-0 right-0 flex flex-col items-center justify-center text-white\">\n              <Title\n                className={`mt-[100px] lg:text-[30px] text-[40px] font-bold text-white ${styles.titleWhite}`}\n              >\n                Welcome Back!\n              </Title>\n              <Title className=\"max-w-[60%] text-center text-[16px] mt-5\">\n                {\" \"}\n                To keep contected with us please login with your personal info\n              </Title>\n              <Button\n                onClick={() => navigate(\"/register\")}\n                className=\"hover:bg-white hover:text-[#3aaea1] bg-transparent cursor-pointer uppercase text-center no-underline w-[200px] text-[14px] h-[55px] border-solid border-2 text-white leading-10 border-white rounded-3xl m-10\"\n              >\n                {\" \"}\n                Sign In\n              </Button>\n            </Col>\n          </Col>\n          <Col\n            span={16}\n            className=\"bg-white h-full flex flex-col items-center justify-center\"\n          >\n            <Title level={2}>Đăng nhập</Title>\n            <Form\n              name=\"login\"\n              initialValues={formValue}\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n              autoComplete=\"off\"\n            >\n              <Form.Item label=\"Tên đăng nhập\" required name=\"email\">\n                <Input />\n              </Form.Item>\n              <Form.Item label=\"Mật khẩu\" required name=\"password\">\n                <Input.Password size=\"large\" />\n              </Form.Item>\n              <Form.Item name=\"remember\" valuePropName=\"checked\">\n                <Checkbox>Remember me</Checkbox>\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </Content>\n    </>\n  );\n}\n"],"names":["_jsx","className","children","Spin","size","UserLevels","Content","Layout","Title","Typography","Login","navigate","useNavigate","_useState","useState","email","password","remember","_useState2","_slicedToArray","formValue","setFormValue","_useState3","_useState4","loading","setLoading","_jsxs","_Fragment","SingleLoading","Row","Col","span","concat","styles","Button","onClick","level","Form","name","initialValues","onFinish","values","AccountAPI","then","result","console","log","setToken","data","id","currentUser","roles","length","USER","message","catch","err","onFinishFailed","r","autoComplete","label","required","Input","valuePropName","Checkbox","type","htmlType"],"sourceRoot":""}