{"version":3,"file":"static/js/366.64df7934.chunk.js","mappings":"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","sources":["interface/constants/UserLevels.const.ts","components/account/ModalAddAccount.tsx","components/account/ModalEditAccount.tsx","pages/account/index.tsx"],"sourcesContent":["export enum UserLevels {\n  ADMIN = \"ADMIN\",\n  LEADER = \"LEADER\",\n  USER = \"USER\",\n}\n","import {\n  Button,\n  Form,\n  Input,\n  message,\n  Modal,\n  Row,\n  Select,\n  Typography,\n} from \"antd\";\nimport { useEffect } from \"react\";\nimport { AccountAPI } from \"../../apis/account.api\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { AddAccount } from \"../../app/reducers/Account/Account.reducer\";\nimport { UserLevels } from \"../../interface/constants/UserLevels.const\";\n\nconst { Text } = Typography;\nconst { Option } = Select;\ninterface IFormValue {\n  name: string;\n  email: string;\n  password: string;\n  phone: string;\n  confirmPassword: string;\n  roleId: number;\n}\n\ninterface IModalAddAccountProps {\n  modalOpen: boolean;\n  setModalOpen: (el: boolean) => void;\n}\n\nexport default function ModalAddAccount(props: IModalAddAccountProps) {\n  const { modalOpen, setModalOpen } = props;\n  const [form] = Form.useForm();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    form.setFieldValue(\"roleId\", 3);\n  }, [form, modalOpen]);\n  const onFinish = (values: IFormValue) => {\n    console.log(\"values\", values);\n\n    if (values.password !== values.confirmPassword) {\n      message.info(\"Mật khẩu chưa khớp!\");\n    } else {\n      let typeRole = UserLevels.USER;\n      if (values.roleId === 2) typeRole = UserLevels.LEADER;\n      AccountAPI.add({ ...values, typeRole })\n        .then((result) => {\n          AccountAPI.changeRole(result.data.id, values.roleId).then(() => {\n            dispatch(\n              AddAccount({\n                ...result.data,\n                roleId: values.roleId,\n              })\n            );\n            message.success(\"Success\");\n            setModalOpen(false);\n          });\n        })\n        .catch(() => {\n          message.error(\"Error\");\n          setModalOpen(false);\n        });\n    }\n  };\n\n  const onFinishFailed = () => {\n    message.error(\"Error!\");\n  };\n\n  return (\n    <>\n      <Modal\n        destroyOnClose={true}\n        title={<Typography.Text>Thêm người dùng</Typography.Text>}\n        style={{ top: 20 }}\n        open={modalOpen}\n        onOk={() => setModalOpen(false)}\n        onCancel={() => setModalOpen(false)}\n        footer={null}\n        forceRender\n      >\n        <Form\n          form={form}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          colon={false}\n          autoComplete=\"off\"\n        >\n          <Text>Tên</Text>\n          <Form.Item name=\"name\" required label=\"\">\n            <Input />\n          </Form.Item>\n          <Text>Email</Text>\n          <Form.Item name=\"email\" required label=\"\">\n            <Input />\n          </Form.Item>\n          <Text>Mật khẩu</Text>\n          <Form.Item name=\"password\" required label=\"\">\n            <Input.Password />\n          </Form.Item>\n          <Text>Xác nhận mật khẩu </Text>\n          <Form.Item name=\"confirmPassword\" required label=\"\">\n            <Input.Password />\n          </Form.Item>\n          <Text>Số điện thoại</Text>\n          <Form.Item name=\"phone\" label=\"\">\n            <Input />\n          </Form.Item>\n          <Text>Role</Text>\n          <Form.Item name=\"roleId\" label=\"\">\n            <Select>\n              <Option value={2}>{UserLevels.LEADER}</Option>\n              <Option value={3}>{UserLevels.USER}</Option>\n            </Select>\n          </Form.Item>\n\n          <Row className=\"justify-end\">\n            <Button className=\"mr-4\" onClick={() => setModalOpen(false)}>\n              Đóng\n            </Button>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Lưu\n            </Button>\n          </Row>\n        </Form>\n      </Modal>\n    </>\n  );\n}\n","import {\n  Button,\n  Form,\n  Input,\n  message,\n  Modal,\n  Row,\n  Select,\n  Typography\n} from \"antd\";\nimport { useEffect } from \"react\";\nimport { AccountAPI } from \"../../apis/account.api\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport {\n  UpdateAccount\n} from \"../../app/reducers/Account/Account.reducer\";\nimport { IAccount } from \"../../interface/Account.interface\";\nimport { UserLevels } from \"../../interface/constants/UserLevels.const\";\n\nconst { Text } = Typography;\nconst { Option } = Select;\ninterface IFormValue {\n  name: string;\n  email: string;\n  password: string;\n  phone: string;\n  confirmPassword: string;\n  roleId: number;\n}\n\ninterface IModalAddAccountProps {\n  modalOpen: boolean;\n  setModalOpen: (el: boolean) => void;\n  account: IAccount;\n}\n\nexport default function ModalEditAccount(props: IModalAddAccountProps) {\n  const { modalOpen, setModalOpen, account } = props;\n  const [form] = Form.useForm();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    let roleId = 3;\n    if (account.typeRole === UserLevels.ADMIN) {\n      roleId = 1;\n    } else if (account.typeRole === UserLevels.LEADER) {\n      roleId = 2;\n    } else if (account.typeRole === UserLevels.USER) {\n      roleId = 3;\n    }\n    form.setFieldsValue({\n      name: account.name,\n      email: account.email,\n      phone: account.phone,\n      typeRole: account.typeRole,\n      roleId,\n    });\n  }, [form, modalOpen, account]);\n  const onFinish = (values: IFormValue) => {\n    if (account.id) {\n      let typeRole = UserLevels.USER;\n      if (values.roleId === 1) typeRole = UserLevels.ADMIN;\n      if (values.roleId === 2) typeRole = UserLevels.LEADER;\n      if (values.roleId === 3) typeRole = UserLevels.USER;\n      AccountAPI.update(account.id, { ...values, typeRole })\n        .then((result) => {\n          AccountAPI.changeRole(result.data.id, values.roleId).then(() => {\n            dispatch(\n              UpdateAccount({\n                ...result.data,\n                roleId: values.roleId,\n              })\n            );\n            message.success(\"Success\");\n            setModalOpen(false);\n          });\n        })\n        .catch(() => {\n          message.error(\"Error\");\n          setModalOpen(false);\n        });\n    }\n  };\n\n  const onFinishFailed = () => {\n    message.error(\"Error!\");\n  };\n\n  return (\n    <>\n      <Modal\n        destroyOnClose={true}\n        title={<Typography.Text>Sửa thông tin</Typography.Text>}\n        style={{ top: 20 }}\n        open={modalOpen}\n        onOk={() => setModalOpen(false)}\n        onCancel={() => setModalOpen(false)}\n        footer={null}\n        forceRender\n      >\n        <Form\n          form={form}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          colon={false}\n          autoComplete=\"off\"\n        >\n          <Text>Tên</Text>\n          <Form.Item name=\"name\" required label=\"\">\n            <Input />\n          </Form.Item>\n          <Text>Email</Text>\n          <Form.Item name=\"email\" required label=\"\">\n            <Input />\n          </Form.Item>\n          <Text>Số điện thoại</Text>\n          <Form.Item name=\"phone\" label=\"\">\n            <Input />\n          </Form.Item>\n          <Text>Role</Text>\n          <Form.Item name=\"roleId\" label=\"\">\n            <Select>\n              <Option value={1}>{UserLevels.ADMIN}</Option>\n              <Option value={2}>{UserLevels.LEADER}</Option>\n              <Option value={3}>{UserLevels.USER}</Option>\n            </Select>\n          </Form.Item>\n\n          <Row className=\"justify-end\">\n            <Button className=\"mr-4\" onClick={() => setModalOpen(false)}>\n              Đóng\n            </Button>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Lưu\n            </Button>\n          </Row>\n        </Form>\n      </Modal>\n    </>\n  );\n}\n","import {\n  DeleteOutlined,\n  EditOutlined,\n  PlusOutlined\n} from \"@ant-design/icons\";\nimport {\n  Button,\n  message,\n  Popconfirm,\n  Row,\n  Table, Typography\n} from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { AccountAPI } from \"../../apis/account.api\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport {\n  DeleteAccount,\n  GetAccount,\n  SetAccount\n} from \"../../app/reducers/Account/Account.reducer\";\nimport ModalAddAccount from \"../../components/account/ModalAddAccount\";\nimport ModalEditAccount from \"../../components/account/ModalEditAccount\";\nimport { IAccount } from \"../../interface/Account.interface\";\n\nimport \"./index.css\";\n\nexport default function Account() {\n  const data = useAppSelector(GetAccount);\n  const dispatch = useAppDispatch();\n\n  const [showModalAdd, setShowModalAdd] = useState<boolean>(false);\n\n  useEffect(() => {\n    AccountAPI.fetchAll().then((result) => {\n      console.log(result.headers);\n\n      dispatch(SetAccount(result.data));\n    });\n  }, [dispatch]);\n\n  const columns = [\n    {\n      title: \"STT\",\n      dataIndex: \"id\",\n      render: (_: null, __: IAccount, index: number) => {\n        return <Typography.Title level={5}>{index + 1}</Typography.Title>;\n      },\n    },\n    {\n      title: \"Tên\",\n      width: \"40%\",\n      dataIndex: \"name\",\n    },\n    {\n      title: \"Email\",\n      dataIndex: \"email\",\n      width: \"10%\",\n    },\n    {\n      title: \"Role\",\n      width: \"10%\",\n      dataIndex: \"typeRole\",\n    },\n    {\n      title: \"Thiết lập\",\n      render: (_: null, record: IAccount) => {\n        return <TableItem record={record} />;\n      },\n    },\n  ];\n\n  return (\n    <>\n      <Row className=\"mb-4\">\n        <Button\n          type=\"primary\"\n          icon={<PlusOutlined />}\n          onClick={() => setShowModalAdd(true)}\n        ></Button>\n      </Row>\n      <ModalAddAccount\n        modalOpen={showModalAdd}\n        setModalOpen={setShowModalAdd}\n      />\n\n      <Table\n        columns={columns}\n        dataSource={data}\n        bordered\n        rowKey=\"id\"\n        pagination={{ pageSize: 10 }}\n      />\n    </>\n  );\n}\n\ninterface ITableItemProps {\n  record: IAccount;\n}\nfunction TableItem(props: ITableItemProps) {\n  const { record } = props;\n  const dispatch = useAppDispatch();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n\n  const deleteRecord = (record: IAccount) => {\n    if (record.id) {\n      AccountAPI.delete(record.id)\n        .then(() => {\n          dispatch(DeleteAccount(record));\n        })\n        .catch((err) => {\n          message.error(\"Error\");\n        });\n    }\n  };\n  return (\n    <>\n      <Popconfirm\n        title=\"Bạn có chắc chắn muốn xóa không?\"\n        onConfirm={() => deleteRecord(record)}\n      >\n        <Typography.Link className=\"mr-4\">\n          <DeleteOutlined style={{ fontSize: \"130%\" }} />\n        </Typography.Link>\n      </Popconfirm>\n\n      <Typography.Link className=\"mr-4\" onClick={() => setModalOpen(true)}>\n        <EditOutlined style={{ fontSize: \"130%\" }} />\n      </Typography.Link>\n\n      <ModalEditAccount\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        account={record}\n      />\n    </>\n  );\n}\n"],"names":["UserLevels","Text","Typography","Option","Select","ModalAddAccount","props","modalOpen","setModalOpen","_Form$useForm","Form","form","_slicedToArray","dispatch","useAppDispatch","useEffect","setFieldValue","_jsx","_Fragment","children","Modal","destroyOnClose","title","style","top","open","onOk","onCancel","footer","forceRender","_jsxs","onFinish","values","console","log","password","confirmPassword","message","typeRole","roleId","AccountAPI","_objectSpread","then","result","data","id","AddAccount","catch","onFinishFailed","colon","autoComplete","name","required","label","Input","value","Row","className","Button","onClick","type","htmlType","ModalEditAccount","account","setFieldsValue","email","phone","UpdateAccount","Account","useAppSelector","GetAccount","_useState","useState","_useState2","showModalAdd","setShowModalAdd","headers","SetAccount","columns","dataIndex","render","_","__","index","level","width","record","TableItem","icon","PlusOutlined","Table","dataSource","bordered","rowKey","pagination","pageSize","_useState3","_useState4","Popconfirm","onConfirm","DeleteAccount","err","deleteRecord","DeleteOutlined","fontSize","EditOutlined"],"sourceRoot":""}